# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      # Important: Don't change this otherwise we will stop testing the earliest
      # python version we have to support.
      - image: python:3.7-buster
    resource_class: small
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Install Environment Dependencies
          command: | # install dependencies
            apt-get -y install curl
            pip install --upgrade pip
            pip install poetry
            poetry install --no-ansi

      - run:
          name: Black Formatting Check # Only validation, without re-formatting
          command: |
            poetry run black --check -t py36 launch
      - run:
          name: Flake8 Lint Check # Uses setup.cfg for configuration
          command: |
            poetry run flake8 launch --count --statistics --exclude launch/clientlib
      - run:
          name: Pylint Lint Check # Uses .pylintrc for configuration
          command: |
            poetry run pylint launch --ignore=clientlib
      - run :
          name: MyPy typing check
          command: |
            poetry run mypy --ignore-missing-imports launch --exclude launch/clientlib
      - run :
          name: Isort Import Formatting Check # Only validation, without re-formatting
          command: |
            poetry run isort --check-only launch
      - run:
          name: Pytest Test Cases
          command: |
            mkdir test_results
            set -e
            TEST_FILES=$(circleci tests glob "tests/**/test_*.py")
            poetry run coverage run --include=launch/* -m pytest $TEST_FILES
            poetry run coverage report
            poetry run coverage html
      - store_test_results:
          path: htmlcov
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build_and_test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
