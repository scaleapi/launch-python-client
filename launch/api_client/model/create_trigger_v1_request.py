# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from launch.api_client import schemas  # noqa: F401


class CreateTriggerV1Request(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "cron_schedule",
            "bundle_id",
            "name",
        }

        class properties:
            bundle_id = schemas.StrSchema
            cron_schedule = schemas.StrSchema
            name = schemas.StrSchema
            default_job_config = schemas.DictSchema

            class default_job_metadata(schemas.DictSchema):
                class MetaOapg:
                    additional_properties = schemas.StrSchema

                def __getitem__(
                    self,
                    name: typing.Union[
                        str,
                    ],
                ) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                    self,
                    name: typing.Union[
                        str,
                    ],
                ) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        str,
                    ],
                ) -> "default_job_metadata":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "bundle_id": bundle_id,
                "cron_schedule": cron_schedule,
                "name": name,
                "default_job_config": default_job_config,
                "default_job_metadata": default_job_metadata,
            }

    cron_schedule: MetaOapg.properties.cron_schedule
    bundle_id: MetaOapg.properties.bundle_id
    name: MetaOapg.properties.name

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["bundle_id"]
    ) -> MetaOapg.properties.bundle_id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["cron_schedule"]
    ) -> MetaOapg.properties.cron_schedule:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["default_job_config"]
    ) -> MetaOapg.properties.default_job_config:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["default_job_metadata"]
    ) -> MetaOapg.properties.default_job_metadata:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "bundle_id",
                "cron_schedule",
                "name",
                "default_job_config",
                "default_job_metadata",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["bundle_id"]
    ) -> MetaOapg.properties.bundle_id:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["cron_schedule"]
    ) -> MetaOapg.properties.cron_schedule:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["default_job_config"]
    ) -> typing.Union[MetaOapg.properties.default_job_config, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["default_job_metadata"]
    ) -> typing.Union[MetaOapg.properties.default_job_metadata, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "bundle_id",
                "cron_schedule",
                "name",
                "default_job_config",
                "default_job_metadata",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        cron_schedule: typing.Union[
            MetaOapg.properties.cron_schedule,
            str,
        ],
        bundle_id: typing.Union[
            MetaOapg.properties.bundle_id,
            str,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        default_job_config: typing.Union[
            MetaOapg.properties.default_job_config, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        default_job_metadata: typing.Union[
            MetaOapg.properties.default_job_metadata, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CreateTriggerV1Request":
        return super().__new__(
            cls,
            *_args,
            cron_schedule=cron_schedule,
            bundle_id=bundle_id,
            name=name,
            default_job_config=default_job_config,
            default_job_metadata=default_job_metadata,
            _configuration=_configuration,
            **kwargs,
        )
