# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from launch_client import schemas  # noqa: F401

class CreateDockerImageBatchJobV1Request(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "labels",
        }

        class properties:
            class labels(schemas.DictSchema):
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                def __getitem__(
                    self,
                    name: typing.Union[
                        str,
                    ],
                ) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                def get_item_oapg(
                    self,
                    name: typing.Union[
                        str,
                    ],
                ) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        str,
                    ],
                ) -> "labels":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            docker_image_batch_job_bundle_id = schemas.StrSchema
            docker_image_batch_job_bundle_name = schemas.StrSchema
            job_config = schemas.DictSchema

            class resource_requests(
                schemas.ComposedSchema,
            ):
                class MetaOapg:
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            CreateDockerImageBatchJobResourceRequests,
                        ]
                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        schemas.AnyTypeSchema,
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        None,
                        list,
                        tuple,
                        bytes,
                    ],
                ) -> "resource_requests":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "labels": labels,
                "docker_image_batch_job_bundle_id": docker_image_batch_job_bundle_id,
                "docker_image_batch_job_bundle_name": docker_image_batch_job_bundle_name,
                "job_config": job_config,
                "resource_requests": resource_requests,
            }
    labels: MetaOapg.properties.labels

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["docker_image_batch_job_bundle_id"]
    ) -> MetaOapg.properties.docker_image_batch_job_bundle_id: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["docker_image_batch_job_bundle_name"]
    ) -> MetaOapg.properties.docker_image_batch_job_bundle_name: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_config"]) -> MetaOapg.properties.job_config: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["resource_requests"]
    ) -> MetaOapg.properties.resource_requests: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "labels",
                "docker_image_batch_job_bundle_id",
                "docker_image_batch_job_bundle_name",
                "job_config",
                "resource_requests",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["docker_image_batch_job_bundle_id"]
    ) -> typing.Union[MetaOapg.properties.docker_image_batch_job_bundle_id, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["docker_image_batch_job_bundle_name"]
    ) -> typing.Union[MetaOapg.properties.docker_image_batch_job_bundle_name, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["job_config"]
    ) -> typing.Union[MetaOapg.properties.job_config, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["resource_requests"]
    ) -> typing.Union[MetaOapg.properties.resource_requests, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "labels",
                "docker_image_batch_job_bundle_id",
                "docker_image_batch_job_bundle_name",
                "job_config",
                "resource_requests",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        labels: typing.Union[
            MetaOapg.properties.labels,
            dict,
            frozendict.frozendict,
        ],
        docker_image_batch_job_bundle_id: typing.Union[
            MetaOapg.properties.docker_image_batch_job_bundle_id, str, schemas.Unset
        ] = schemas.unset,
        docker_image_batch_job_bundle_name: typing.Union[
            MetaOapg.properties.docker_image_batch_job_bundle_name, str, schemas.Unset
        ] = schemas.unset,
        job_config: typing.Union[
            MetaOapg.properties.job_config, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        resource_requests: typing.Union[
            MetaOapg.properties.resource_requests,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
            schemas.Unset,
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CreateDockerImageBatchJobV1Request":
        return super().__new__(
            cls,
            *_args,
            labels=labels,
            docker_image_batch_job_bundle_id=docker_image_batch_job_bundle_id,
            docker_image_batch_job_bundle_name=docker_image_batch_job_bundle_name,
            job_config=job_config,
            resource_requests=resource_requests,
            _configuration=_configuration,
            **kwargs,
        )

from launch_client.model.create_docker_image_batch_job_resource_requests import (
    CreateDockerImageBatchJobResourceRequests,
)
